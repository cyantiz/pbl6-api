datasource db {
  url      = env("DATABASE_URL")
  provider = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model user {
  id             Int              @id @default(autoincrement())
  username       String           @unique
  name           String
  role           role             @default(USER)
  password       String
  email          String           @unique
  resetToken     String?
  avatarUrl      String?
  createdAt      DateTime         @default(now())
  bannedAt       DateTime?
  verifyToken    String?
  isVerified     Boolean          @default(false)
  verifiedAt     DateTime?
  posts          post[]
  comments       comment[]
  visits         visit[]
  notifications  notification[]
  reports        report[]
  postVotes      post_vote[]
  commentVotes   comment_vote[]
  change_request change_request[]
}

model post {
  id             Int              @id @default(autoincrement())
  title          String
  body           String
  userId         Int
  status         String           @default("PENDING")
  createdAt      DateTime         @default(now())
  upvote         Int              @default(0)
  downvote       Int              @default(0)
  deletedAt      DateTime?
  categoryId     Int?
  subcategories  subcategory[]
  comments       comment[]
  visits         visit[]
  postVotes      post_vote[]
  changeRequests change_request[]
  author         user             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category       category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  report         report[]
}

model category {
  id             Int              @id @default(autoincrement())
  name           String
  thumbnail      String
  slug           String
  createdAt      DateTime         @default(now())
  posts          post[]
  subcategories  subcategory[]
  change_request change_request[]
}

model subcategory {
  id               Int             @id @default(autoincrement())
  name             String
  categoryId       Int
  createdAt        DateTime?       @default(now())
  posts            post[]
  category         category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  change_request   change_request? @relation(fields: [change_requestId], references: [id])
  change_requestId Int?
}

model comment {
  id              Int            @id @default(autoincrement())
  text            String
  userId          Int
  postId          Int
  upvote          Int            @default(0)
  downvote        Int            @default(0)
  parentCommentId Int?
  createdAt       DateTime       @default(now())
  user            user           @relation(fields: [userId], references: [id])
  post            post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment   comment?       @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  childComments   comment[]      @relation("CommentToComment")
  commentVotes    comment_vote[]
}

model visit {
  id         Int      @id @default(autoincrement())
  userId     Int
  postId     Int
  percentage Int      @default(0)
  visitAt    DateTime @default(now())
  user       user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  readAt    DateTime?
  message   String
  createdAt DateTime  @default(now())
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model report {
  id        Int           @id @default(autoincrement())
  userId    Int
  postId    Int
  reason    String
  status    report_status @default(PEDNING)
  createdAt DateTime      @default(now())
  user      user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      post          @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model post_vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  positive  Boolean
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model comment_vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  positive  Boolean
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model change_request {
  id            Int           @id @default(autoincrement())
  postId        Int
  userId        Int
  title         String
  body          String
  categoryId    Int
  subcategories subcategory[]
  category      category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  post          post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          user          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum role {
  USER
  MODERATOR
  ADMIN
}

enum post_status {
  PENDING
  DELETED
  ACTIVE
  DENIED
}

enum report_status {
  PEDNING
  PROCESSING
  RESOLVED
}
