datasource db {
  url      = env("DATABASE_URL")
  provider = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model user {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  name        String
  role        Role      @default(USER)
  password    String
  email       String    @unique
  resetToken  String?
  avatarUrl   String?
  createdAt   DateTime  @default(now())
  bannedAt    DateTime?
  verifyToken String?
  isVerified  Boolean   @default(false)
  verifiedAt  DateTime?
  promotedAt  DateTime?

  posts              post[]
  comments           comment[]
  visits             visit[]
  notifications      notification[]
  reports            report[]
  postVotes          post_vote[]
  commentVotes       comment_vote[]
  change_request     change_request[]
  editor_reg_request editor_reg_request[]
  readPost           user_read_post[]
}

model post {
  id            Int        @id @default(autoincrement())
  title         String
  slug          String     @unique
  secondaryText String?    @db.Text()
  body          String     @db.Text()
  userId        Int
  categoryId    Int?
  status        PostStatus @default(DRAFT)
  upvote        Int        @default(0)
  downvote      Int        @default(0)
  mongoOid      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?
  publishedAt   DateTime?
  unpublishedAt DateTime?
  deletedAt     DateTime?

  comments         comment[]
  visits           visit[]
  postVotes        post_vote[]
  changeRequests   change_request[]
  thumbnailMediaId Int?
  thumbnailMedia   media?             @relation(fields: [thumbnailMediaId], references: [id])
  author           user               @relation(fields: [userId], references: [id], onDelete: Cascade)
  category         category?          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  report           report[]
  post_media       post_media[]
  post_subcategory post_subcategory[]
  readUser         user_read_post[]
}

model category {
  id             Int              @id @default(autoincrement())
  name           String
  thumbnail      String
  slug           String           @unique
  createdAt      DateTime         @default(now())
  posts          post[]
  subcategories  subcategory[]
  change_request change_request[]
}

model subcategory {
  id               Int                @id @default(autoincrement())
  name             String
  categoryId       Int
  createdAt        DateTime?          @default(now())
  category         category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  change_request   change_request?    @relation(fields: [change_requestId], references: [id])
  change_requestId Int?
  post_subcategory post_subcategory[]
}

model comment {
  id              Int            @id @default(autoincrement())
  text            String
  userId          Int
  postId          Int
  upvote          Int            @default(0)
  downvote        Int            @default(0)
  parentCommentId Int?
  createdAt       DateTime       @default(now())
  user            user           @relation(fields: [userId], references: [id])
  post            post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment   comment?       @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  childComments   comment[]      @relation("CommentToComment")
  commentVotes    comment_vote[]
}

model visit {
  id         Int      @id @default(autoincrement())
  userId     Int?
  IP         String?
  postId     Int
  percentage Int      @default(0)
  visitAt    DateTime @default(now())
  user       user?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model notification {
  id        Int       @id @default(autoincrement())
  userId    Int
  readAt    DateTime?
  message   String
  createdAt DateTime  @default(now())
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model report {
  id        Int          @id @default(autoincrement())
  userId    Int
  postId    Int
  reason    String
  status    ReportStatus @default(PEDNING)
  createdAt DateTime     @default(now())
  user      user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      post         @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model post_vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  positive  Boolean
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model comment_vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  positive  Boolean
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model change_request {
  id            Int           @id @default(autoincrement())
  postId        Int
  userId        Int
  title         String
  body          String
  categoryId    Int
  subcategories subcategory[]
  category      category?     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  post          post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user          user          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model editor_reg_request {
  id         Int       @id @default(autoincrement())
  userId     Int
  createdAt  DateTime  @default(now())
  approvedAt DateTime?
  message    String    @db.Text()
  user       user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model media {
  id          Int          @id @default(autoincrement())
  fileName    String?      @db.Text()
  alt         String?      @db.Text()
  externalUrl String?      @db.Text()
  createdAt   DateTime     @default(now())
  post        post[]
  post_media  post_media[]
}

model post_media {
  postId    Int
  mediaId   Int
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  media     media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([postId, mediaId])
}

model post_subcategory {
  postId        Int
  subcategoryId Int
  post          post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  subcategory   subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())

  @@id([postId, subcategoryId])
}

model user_read_post {
  userId   Int
  postId   Int
  progress Int  @default(0)
  user     user @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

model temp_article_from_mongo {
  id          Int      @id @default(autoincrement())
  title       String   @db.Text()
  article     String   @db.Text()
  sport_type  String
  author      String
  image_0_url String?  @db.Text()
  image_0_alt String?  @db.Text()
  image_1_url String?  @db.Text()
  image_1_alt String?  @db.Text()
  image_2_url String?  @db.Text()
  image_2_alt String?  @db.Text()
  image_3_url String?  @db.Text()
  image_3_alt String?  @db.Text()
  image_4_url String?  @db.Text()
  image_4_alt String?  @db.Text()
  image_5_url String?  @db.Text()
  image_5_alt String?  @db.Text()
  image_6_url String?  @db.Text()
  image_6_alt String?  @db.Text()
  image_7_url String?  @db.Text()
  image_7_alt String?  @db.Text()
  image_8_url String?  @db.Text()
  image_8_alt String?  @db.Text()
  image_9_url String?  @db.Text()
  image_9_alt String?  @db.Text()
  from        String?  @db.Text()
  createdAt   DateTime @default(now())
}

enum Role {
  USER
  EDITOR
  MODERATOR
  ADMIN
}

enum PostStatus {
  DRAFT
  DELETED
  PUBLISHED
  DENIED
}

enum ReportStatus {
  PEDNING
  PROCESSING
  RESOLVED
}
